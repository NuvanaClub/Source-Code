generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(cuid())
  email     String         @unique
  name      String?
  password  String?
  role      String         @default("USER")
  image     String?
  bio       String?
  location  String?
  website   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  auditLogs AuditLog[]
  comments  Comment[]
  replies   CommentReply[]
  grows     Grow[]
  favorites UserFavorite[]
}

model Strain {
  id        String         @id @default(cuid())
  name      String         @unique
  type      String?
  summary   String?
  lineage   String?
  thcMin    Float?
  thcMax    Float?
  cbdMin    Float?
  cbdMax    Float?
  terpenes  String?
  tags      String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  comments  Comment[]
  grows     Grow[]
  images    StrainImage[]
  favorites UserFavorite[]
}

model StrainImage {
  id        String   @id @default(cuid())
  strainId  String
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  strain    Strain   @relation(fields: [strainId], references: [id], onDelete: Cascade)
}

model Grow {
  id         String         @id @default(cuid())
  userId     String
  strainId   String?
  title      String
  visibility String         @default("private")
  isPublic   Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  strain     Strain?        @relation(fields: [strainId], references: [id])
  user       User           @relation(fields: [userId], references: [id])
  entries    GrowEntry[]
  favorites  UserFavorite[]
}

model GrowEntry {
  id          String   @id @default(cuid())
  growId      String
  note        String
  photoPath   String?
  stage       String?
  plantHeight Float?
  leafCount   Int?
  temperature Float?
  humidity    Float?
  ph          Float?
  nutrients   String?
  metrics     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  grow        Grow     @relation(fields: [growId], references: [id])
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  strainId  String?
  growId    String?
  type      String
  createdAt DateTime @default(now())
  grow      Grow?    @relation(fields: [growId], references: [id], onDelete: Cascade)
  strain    Strain?  @relation(fields: [strainId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String         @id @default(cuid())
  userId    String
  strainId  String?
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  strain    Strain?        @relation(fields: [strainId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id])
  replies   CommentReply[]
}

model CommentReply {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
